"use strict";(self.webpackChunkwata_docs=self.webpackChunkwata_docs||[]).push([[2443],{5874:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"architecture","title":"\ud83c\udfd7\ufe0f Architecture","description":"WATA uses a microservice architecture with:","source":"@site/docs/architecture.md","sourceDirName":".","slug":"/architecture","permalink":"/wata/docs/architecture","draft":false,"unlisted":false,"editUrl":"https://github.com/IOITI/wata/tree/main/website/docs/architecture.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"\ud83d\udcb9 Welcome to WATA","permalink":"/wata/docs/intro"},"next":{"title":"\ud83d\udcca Trading Workflow","permalink":"/wata/docs/trading-workflow"}}');var i=n(4848),t=n(8453);const a={sidebar_position:2},l="\ud83c\udfd7\ufe0f Architecture",c={},o=[{value:"Key Components",id:"key-components",level:2},{value:"1. Web Server",id:"1-web-server",level:3},{value:"2. Trader Service",id:"2-trader-service",level:3},{value:"3. Scheduler",id:"3-scheduler",level:3},{value:"4. Telegram Service",id:"4-telegram-service",level:3},{value:"5. RabbitMQ",id:"5-rabbitmq",level:3}];function d(e){const r={h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",mermaid:"mermaid",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.header,{children:(0,i.jsx)(r.h1,{id:"\ufe0f-architecture",children:"\ud83c\udfd7\ufe0f Architecture"})}),"\n",(0,i.jsx)(r.p,{children:"WATA uses a microservice architecture with:"}),"\n",(0,i.jsxs)(r.table,{children:[(0,i.jsx)(r.thead,{children:(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.th,{children:"Component (roles)"}),(0,i.jsx)(r.th,{children:"Purpose"})]})}),(0,i.jsxs)(r.tbody,{children:[(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.strong,{children:"Web Server"})}),(0,i.jsx)(r.td,{children:"Receives webhook signals from third party (like: TradingView)"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.strong,{children:"Trader"})}),(0,i.jsx)(r.td,{children:"Executes Saxo Bank API operations"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.strong,{children:"Scheduler"})}),(0,i.jsx)(r.td,{children:"Manages job orchestrations"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.strong,{children:"Telegram"})}),(0,i.jsx)(r.td,{children:"Delivers notifications and alerts"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.strong,{children:"RabbitMQ"})}),(0,i.jsx)(r.td,{children:"Handles inter-component messaging"})]})]})]}),"\n",(0,i.jsx)(r.mermaid,{value:'flowchart TD\n    %% Styling\n    classDef external fill:#f9f9f9,stroke:#aaa,stroke-width:1px,color:#000\n    classDef processing fill:#e1f5fe,stroke:#03a9f4,stroke-width:1px,color:#000\n    classDef execution fill:#e8f5e9,stroke:#4caf50,stroke-width:1px,color:#000\n    classDef jobs fill:#fff8e1,stroke:#ffc107,stroke-width:1px,color:#000\n    classDef database fill:#f3e5f5,stroke:#9c27b0,stroke-width:2px,stroke-dasharray: 5 5,color:#000\n    classDef reporting fill:#ffebee,stroke:#f44336,stroke-width:1px,color:#000\n    \n    %% External Systems\n    subgraph ExtSys["\ud83c\udf10 External Systems"]\n        direction LR\n        TV("\ud83d\udda5\ufe0f TradingView/<br>Signal Source")\n        SB("\ud83c\udfe6 Saxo Bank API")\n        User("\ud83d\udc64 User/Trader")\n        TG("\ud83d\udcf1 Telegram Service")\n    end\n    \n    %% WATA Core Services\n    subgraph CoreSys["\u2699\ufe0f WATA Core Services"]\n        direction TB\n        \n        subgraph SigProc["\ud83d\udce1 Signal Processing"]\n            direction LR\n            WS("\ud83d\udd0c Web Server")\n            RMQ("\ud83d\udce8 RabbitMQ<br>Message Broker")\n        end\n        \n        subgraph ExecEng["\ud83d\udcb9 Execution Engine"]\n            direction LR\n            TR("\ud83d\udcb1 Trader Service")\n            DB[("\ud83d\udcbe DuckDB")]:::database\n        end\n        \n        subgraph JobSvc["\u23f1\ufe0f Jobs Orchestration"]\n            direction LR\n            SC("\ud83d\udd04 Scheduler")\n        end\n    end\n    \n    %% Reporting System\n    subgraph RepSys["\ud83d\udcca Local Reporting System"]\n        direction LR\n        EX("\ud83d\udd04 Data Export")\n        OD("\ud83d\udcc8 Observable<br>Dashboard")\n    end\n    \n    %% Connections with styled arrows\n    TV -- "1\ufe0f\u20e3 Webhook Signal" --\x3e WS\n    WS -- "2\ufe0f\u20e3 Signal Message" --\x3e RMQ\n    RMQ -- "3\ufe0f\u20e3 Position Request" --\x3e TR\n    TR -- "Authentication" --\x3e SB\n    User -- "Auth Code" --\x3e TR\n    TR -- "4\ufe0f\u20e3 Trading Operations" --\x3e SB\n    TR -- "Send Notification" --\x3e RMQ\n    RMQ -- "Notification Request" --\x3e TG\n    TG -- "5\ufe0f\u20e3 Notifications" --\x3e User\n    TR <-- "Position Data" --\x3e DB\n    SC -- "Periodic Tasks" --\x3e RMQ\n    RMQ -- "Status Tasks" --\x3e TR\n    TR <-- "Performance Data" --\x3e DB\n    DB -. "6\ufe0f\u20e3 Manual Data Sync" .-> EX\n    EX -. "Data Transform" .-> OD\n    OD -. "7\ufe0f\u20e3 Performance<br>Visualization" .-> User\n    \n    %% Apply styles\n    class TV,SB,User,TG external\n    class WS,RMQ processing\n    class TR,DB execution\n    class SC jobs\n    class EX,OD reporting'}),"\n",(0,i.jsx)(r.h2,{id:"key-components",children:"Key Components"}),"\n",(0,i.jsx)(r.h3,{id:"1-web-server",children:"1. Web Server"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"Receives and validates webhook signals from TradingView or other sources"}),"\n",(0,i.jsx)(r.li,{children:"Authenticates incoming requests"}),"\n",(0,i.jsx)(r.li,{children:"Forwards validated signals to the message broker"}),"\n"]}),"\n",(0,i.jsx)(r.h3,{id:"2-trader-service",children:"2. Trader Service"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"Connects to Saxo Bank API"}),"\n",(0,i.jsx)(r.li,{children:"Handles OAuth 2.0 authentication"}),"\n",(0,i.jsx)(r.li,{children:"Executes trades based on signals"}),"\n",(0,i.jsx)(r.li,{children:"Monitors positions for performance thresholds"}),"\n",(0,i.jsx)(r.li,{children:"Records trading data for analysis"}),"\n"]}),"\n",(0,i.jsx)(r.h3,{id:"3-scheduler",children:"3. Scheduler"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"Performs periodic tasks (daily summaries, position checks)"}),"\n",(0,i.jsx)(r.li,{children:"Manages system health checks"}),"\n",(0,i.jsx)(r.li,{children:"Handles time-based operations"}),"\n"]}),"\n",(0,i.jsx)(r.h3,{id:"4-telegram-service",children:"4. Telegram Service"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"Delivers real-time notifications about trades"}),"\n",(0,i.jsx)(r.li,{children:"Sends authentication requests"}),"\n",(0,i.jsx)(r.li,{children:"Alerts on errors or critical events"}),"\n",(0,i.jsx)(r.li,{children:"Provides daily performance summaries"}),"\n"]}),"\n",(0,i.jsx)(r.h3,{id:"5-rabbitmq",children:"5. RabbitMQ"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"Ensures reliable message delivery between components"}),"\n",(0,i.jsx)(r.li,{children:"Manages message queues for async processing"}),"\n",(0,i.jsx)(r.li,{children:"Handles service communication"}),"\n"]})]})}function h(e={}){const{wrapper:r}={...(0,t.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);