{"searchDocs":[{"title":"🤝 Contributing to WATA","type":0,"sectionRef":"#","url":"/wata-docs/docs/contributing","content":"","keywords":"","version":"Next"},{"title":"Contributors​","type":1,"pageTitle":"🤝 Contributing to WATA","url":"/wata-docs/docs/contributing#contributors","content":" @ioiti: Project author and maintainer@hootnot: Saxo OpenAPI library  ","version":"Next","tagName":"h2"},{"title":"How to Contribute​","type":1,"pageTitle":"🤝 Contributing to WATA","url":"/wata-docs/docs/contributing#how-to-contribute","content":" We welcome contributions to WATA! Here's how you can help:  Report Issues Submit bugs or suggest features via GitHub issuesProvide clear steps to reproduce problemsInclude relevant logs or screenshots Submit Pull Requests Fork the repositoryCreate a feature branch for your changesWrite clean, well-documented codeInclude tests where possibleSubmit a pull request with a clear description of changes Share Feedback Let us know how you're using WATASuggest improvements to documentationPropose new features or enhancements  ","version":"Next","tagName":"h2"},{"title":"Development Environment​","type":1,"pageTitle":"🤝 Contributing to WATA","url":"/wata-docs/docs/contributing#development-environment","content":" To set up a development environment:  Clone the repositoryInstall development dependencies pip install -r requirements-dev.txt Run tests to ensure everything is working pytest   ","version":"Next","tagName":"h2"},{"title":"Documentation Contributions​","type":1,"pageTitle":"🤝 Contributing to WATA","url":"/wata-docs/docs/contributing#documentation-contributions","content":" Documentation improvements are especially welcome:  Clone the repositoryMake changes to the documentation files in wata-docs/docs/Test changes locally by running: cd wata-docs npm install npm start Submit a pull request with your changes  ","version":"Next","tagName":"h2"},{"title":"Code Style​","type":1,"pageTitle":"🤝 Contributing to WATA","url":"/wata-docs/docs/contributing#code-style","content":" When contributing code, please follow these guidelines:  Use Python type hints for function parameters and return valuesWrite docstrings for functions and classesFollow PEP 8 standardsAdd unit tests for new functionality  ","version":"Next","tagName":"h2"},{"title":"Acknowledgements​","type":1,"pageTitle":"🤝 Contributing to WATA","url":"/wata-docs/docs/contributing#acknowledgements","content":" WATA would not be possible without these excellent projects and libraries:  @hootnot: Saxo OpenAPI libraryObservable Framework: Powers the reporting dashboardDuckDB: Provides the analytical database capabilitiesFastAPI: Used for the webhook serverRabbitMQ: Handles messaging between componentsAnsible: Automates deployment  ","version":"Next","tagName":"h2"},{"title":"License​","type":1,"pageTitle":"🤝 Contributing to WATA","url":"/wata-docs/docs/contributing#license","content":" WATA is licensed under the MIT License:  MIT License Copyright (c) 2025 IOITI Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &quot;Software&quot;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.  ","version":"Next","tagName":"h2"},{"title":"💾 Database System","type":0,"sectionRef":"#","url":"/wata-docs/docs/database","content":"","keywords":"","version":"Next"},{"title":"Database Architecture​","type":1,"pageTitle":"💾 Database System","url":"/wata-docs/docs/database#database-architecture","content":" DuckDB was chosen for WATA because it provides:  High-speed analytics: In-memory processing with fast query executionSQL compatibility: Familiar query language for data analysisData integrity: Reduced risk of database corruptionLightweight footprint: Minimal server resource requirementsAnalytical capabilities: Optimized for data analysis workloads  ","version":"Next","tagName":"h2"},{"title":"Data Structure​","type":1,"pageTitle":"💾 Database System","url":"/wata-docs/docs/database#data-structure","content":" The database stores several types of information:  Order Tracking Complete order historyExecution details (price, time, size)Order states and status changes Position Management Current and historical positionsEntry and exit pointsPerformance metrics (P&amp;L, duration)Position attributes (instrument, direction) Performance Analytics Daily statisticsCumulative performanceWin/loss metricsTrading patterns  ","version":"Next","tagName":"h2"},{"title":"Database Configuration​","type":1,"pageTitle":"💾 Database System","url":"/wata-docs/docs/database#database-configuration","content":" The database location is specified in the config.json file:  &quot;duckdb&quot;: { &quot;persistant&quot;: { &quot;db_path&quot;: &quot;/app/var/lib/duckdb/trading_data.duckdb&quot; } }   This configurable path allows you to:  Back up the database easilySet a custom location based on your server setupEnsure data persistence across application restarts  ","version":"Next","tagName":"h2"},{"title":"Data Extraction for Reporting​","type":1,"pageTitle":"💾 Database System","url":"/wata-docs/docs/database#data-extraction-for-reporting","content":" The database can be exported for use with the reporting dashboard:  Data is extracted from the DuckDB databaseConverted to Parquet format for efficient storageUsed by the Observable Framework dashboard for visualization  This extraction process is handled by the reporting scripts in the reporting/ directory. ","version":"Next","tagName":"h2"},{"title":"🏗️ Architecture","type":0,"sectionRef":"#","url":"/wata-docs/docs/architecture","content":"","keywords":"","version":"Next"},{"title":"Key Components​","type":1,"pageTitle":"🏗️ Architecture","url":"/wata-docs/docs/architecture#key-components","content":" ","version":"Next","tagName":"h2"},{"title":"1. Web Server​","type":1,"pageTitle":"🏗️ Architecture","url":"/wata-docs/docs/architecture#1-web-server","content":" Receives and validates webhook signals from TradingView or other sourcesAuthenticates incoming requestsForwards validated signals to the message broker  ","version":"Next","tagName":"h3"},{"title":"2. Trader Service​","type":1,"pageTitle":"🏗️ Architecture","url":"/wata-docs/docs/architecture#2-trader-service","content":" Connects to Saxo Bank APIHandles OAuth 2.0 authenticationExecutes trades based on signalsMonitors positions for performance thresholdsRecords trading data for analysis  ","version":"Next","tagName":"h3"},{"title":"3. Scheduler​","type":1,"pageTitle":"🏗️ Architecture","url":"/wata-docs/docs/architecture#3-scheduler","content":" Performs periodic tasks (daily summaries, position checks)Manages system health checksHandles time-based operations  ","version":"Next","tagName":"h3"},{"title":"4. Telegram Service​","type":1,"pageTitle":"🏗️ Architecture","url":"/wata-docs/docs/architecture#4-telegram-service","content":" Delivers real-time notifications about tradesSends authentication requestsAlerts on errors or critical eventsProvides daily performance summaries  ","version":"Next","tagName":"h3"},{"title":"5. RabbitMQ​","type":1,"pageTitle":"🏗️ Architecture","url":"/wata-docs/docs/architecture#5-rabbitmq","content":" Ensures reliable message delivery between componentsManages message queues for async processingHandles service communication ","version":"Next","tagName":"h3"},{"title":"🚀 Deployment Guide","type":0,"sectionRef":"#","url":"/wata-docs/docs/deployment","content":"","keywords":"","version":"Next"},{"title":"Prerequisites​","type":1,"pageTitle":"🚀 Deployment Guide","url":"/wata-docs/docs/deployment#prerequisites","content":" Before deploying WATA, ensure you have:  Saxo Bank account with API accessDedicated Ubuntu server (VPS or local machine)Docker and Docker Compose installedPython 3.12+Ansible (for automated deployment)Telegram bot for notifications(Optional) TradingView account for webhook signals  ","version":"Next","tagName":"h2"},{"title":"Deployment Steps​","type":1,"pageTitle":"🚀 Deployment Guide","url":"/wata-docs/docs/deployment#deployment-steps","content":" ","version":"Next","tagName":"h2"},{"title":"1. Configure Inventory​","type":1,"pageTitle":"🚀 Deployment Guide","url":"/wata-docs/docs/deployment#1-configure-inventory","content":" Copy the example Ansible inventory file: cp deploy/tools/ansible/inventory/inventory_example.ini deploy/tools/ansible/inventory/inventory.ini Edit inventory.ini with your server details: Server hostname or IPSSH user and authentication methodOther Ansible configuration as needed  ","version":"Next","tagName":"h3"},{"title":"2. Build Application Package​","type":1,"pageTitle":"🚀 Deployment Guide","url":"/wata-docs/docs/deployment#2-build-application-package","content":" Build the deployment package: ./package.sh This creates a distributable package with all necessary components.  ","version":"Next","tagName":"h3"},{"title":"3. Deploy to Your Server​","type":1,"pageTitle":"🚀 Deployment Guide","url":"/wata-docs/docs/deployment#3-deploy-to-your-server","content":" Run the deployment script: cd deploy/tools ./deploy_app_to_your_server.sh The script uses Ansible to: Install required dependenciesSet up Docker and Docker ComposeConfigure the application directory structureDeploy the application filesSet up convenient aliases for management  ","version":"Next","tagName":"h3"},{"title":"4. Configure Application Settings​","type":1,"pageTitle":"🚀 Deployment Guide","url":"/wata-docs/docs/deployment#4-configure-application-settings","content":" After deployment, you need to set up the configuration:  Configure RabbitMQ Password # Navigate to the deploy directory cd /app/deploy # Copy the example .env file cp .env.example .env # Edit the .env file to set your custom RabbitMQ password nano .env This sets the password used by RabbitMQ and automatically updates your config.json file through the setup service. Set Up Configuration File cp /app/etc/config_example.json /app/etc/config.json nano /app/etc/config.json Update the configuration with your: Saxo Bank API credentialsTelegram bot informationTrading rules and preferencesOther settings as needed For detailed configuration options, see the Configuration Guide.  ","version":"Next","tagName":"h3"},{"title":"5. Manage the Application​","type":1,"pageTitle":"🚀 Deployment Guide","url":"/wata-docs/docs/deployment#5-manage-the-application","content":" Use these aliases to manage WATA on your server:  watastart: Start the applicationwatastop: Stop the applicationwatalogs: View application logswatastatus: Check application statuswatasaxoauth &lt;CODE&gt;: Submit Saxo authentication code  ","version":"Next","tagName":"h3"},{"title":"Docker Compose Architecture​","type":1,"pageTitle":"🚀 Deployment Guide","url":"/wata-docs/docs/deployment#docker-compose-architecture","content":" WATA uses Docker Compose with an enhanced configuration:  ","version":"Next","tagName":"h2"},{"title":"Environment Variables​","type":1,"pageTitle":"🚀 Deployment Guide","url":"/wata-docs/docs/deployment#environment-variables","content":" The .env file in the /app/deploy directory manages sensitive configurationPrimary use is setting the RabbitMQ password, which is synchronized with your config.json  ","version":"Next","tagName":"h3"},{"title":"Service Dependencies​","type":1,"pageTitle":"🚀 Deployment Guide","url":"/wata-docs/docs/deployment#service-dependencies","content":" A special setup service runs before other services to ensure proper configurationThis service updates the RabbitMQ password in config.json to match your .env fileAll other services depend on both the setup service and RabbitMQ  ","version":"Next","tagName":"h3"},{"title":"Container Structure​","type":1,"pageTitle":"🚀 Deployment Guide","url":"/wata-docs/docs/deployment#container-structure","content":" The application runs in several containers:  rabbitmq: Message broker for inter-service communicationweb_server: Receives webhook signalstrader: Handles Saxo Bank operationsscheduler: Manages periodic taskstelegram: Handles notifications  ","version":"Next","tagName":"h3"},{"title":"Troubleshooting​","type":1,"pageTitle":"🚀 Deployment Guide","url":"/wata-docs/docs/deployment#troubleshooting","content":" Container not starting: Check logs with watalogs to identify issuesAuthentication problems: Verify Saxo credentials in config.jsonConnection issues: Ensure your server has proper internet accessConfiguration problems: Compare with example configuration for missing fields ","version":"Next","tagName":"h2"},{"title":"💹 Welcome to WATA","type":0,"sectionRef":"#","url":"/wata-docs/docs/intro","content":"","keywords":"","version":"Next"},{"title":"🎯 Purpose​","type":1,"pageTitle":"💹 Welcome to WATA","url":"/wata-docs/docs/intro#-purpose","content":" WATA (Warrants Automated Trading Assistant) is an algorithmic trading system compagnon, designed for automated execution of Knock-out warrants (Turbos) on Saxo Bank. It serves as a reliable bridge between trading signals and actual market execution, offering several key benefits:  Automated Execution: Eliminates emotional bias and human error by executing trades based on predefined rules and signals (from TradingView, for example)Risk Management: Implements systematic position monitoring with stop-loss and take-profit mechanismsPerformance Tracking: Provides comprehensive analytics and reporting for trade analysisReal-time Monitoring: Delivers instant notifications via Telegram for trade execution and system statusScalability: Built on a microservice architecture for reliable and maintainable operation  The system is particularly suited for traders who:  Want to automate their trading strategiesNeed reliable execution of trading signalsRequire comprehensive trade tracking and analysisValue real-time monitoring and alertsPrefer systematic, rule-based trading over discretionary decisions  ","version":"Next","tagName":"h2"},{"title":"📖 Documentation Overview​","type":1,"pageTitle":"💹 Welcome to WATA","url":"/wata-docs/docs/intro#-documentation-overview","content":" This documentation will guide you through:  Architecture: Understanding the system design and componentsTrading Workflow: How trades are processed from signal to executionHow-To Guide: Step-by-step setup and usage instructionsConfiguration: Detailed configuration optionsSaxo Authentication: Setting up API accessDatabase System: How data is stored and managedReporting: Analytics and visualization capabilitiesFAQ: Answers to common questions  ","version":"Next","tagName":"h2"},{"title":"📄 License​","type":1,"pageTitle":"💹 Welcome to WATA","url":"/wata-docs/docs/intro#-license","content":" MIT License  Copyright (c) 2025 IOITI ","version":"Next","tagName":"h2"},{"title":"🍻 How-To Guide","type":0,"sectionRef":"#","url":"/wata-docs/docs/how-to","content":"","keywords":"","version":"Next"},{"title":"Prerequisites​","type":1,"pageTitle":"🍻 How-To Guide","url":"/wata-docs/docs/how-to#prerequisites","content":" Before you begin, ensure you have the following:  Ubuntu Server VPS: You need a Virtual Private Server (VPS) running Ubuntu. Popular providers include OVH, Hostinger, DigitalOcean, Linode, Vultr, AWS EC2, Google Cloud Compute Engine, etc. Choose a plan suitable for running multiple Docker containers.  Minimum requirements: 2GB RAM, 50GB SSD, 2 core CPU.Recommended: 4GB RAM, 100GB SSD, 4 core CPU.  Saxo Bank Account: A live trading account with Saxo Bank is required to execute real trades.Telegram Account: Needed for creating a bot and receiving notifications.TradingView Account (Optional but Recommended): To generate trading signals via webhooks. Other signal sources can be adapted.Basic Linux/Command-Line Familiarity: You should be comfortable using SSH and running commands on your server.  ","version":"Next","tagName":"h2"},{"title":"Estimated Annual Costs​","type":1,"pageTitle":"🍻 How-To Guide","url":"/wata-docs/docs/how-to#estimated-annual-costs","content":" While WATA itself is free and open-source, running the system involves some recurring costs:  VPS Hosting: This is the primary cost. Depending on the provider and the server specifications (CPU, RAM, SSD), expect to pay anywhere from €5 to €26+ per month (approximately €60 - €312+ annually). Costs vary significantly based on your chosen provider and plan.TradingView Subscription (Optional): If you use TradingView for generating signals via webhooks (recommended), you'll need a paid plan (Essentials, Plus, or Premium) to use webhooks effectively. Costs vary depending on the plan and billing cycle (check the TradingView website for current pricing), but expect to pay around €130-€260+ per year. Free plans do not support webhooks reliably for automation. Black Friday/Cyber Monday deals are available every year, likely -70% off. Saxo Bank Account: There are typically no annual fees for holding a Saxo Bank account itself, but you will incur trading costs (commissions, spreads, financing costs for holding positions ...) when trades are executed. These depend heavily on your trading activity and the instruments traded. Saxo Bank Turbo warrants are commission free, other warrants providers might have a commission fee. Domain Name (Optional): If you prefer using a domain name instead of an IP address for your server (e.g., for the TradingView webhook URL), you'll need to pay an annual registration fee (typically €10-€20).  Therefore, the minimum essential annual cost is primarily for the VPS, ranging roughly from €200 upwards, plus any TradingView subscription costs if used (€130-€260+), and trading fees incurred via Saxo Bank (for non Saxo Bank Turbo warrants instruments).  ","version":"Next","tagName":"h2"},{"title":"Step 1: Prepare Your Server​","type":1,"pageTitle":"🍻 How-To Guide","url":"/wata-docs/docs/how-to#step-1-prepare-your-server","content":" Connect to your Server: Use SSH to log in to your newly acquired Ubuntu VPS.Install Prerequisites: Follow the prerequisites section in the main README.md to install necessary software like Docker, Docker Compose, Python 3.12+, and optionally Ansible if you plan to use the automated deployment scripts.  ","version":"Next","tagName":"h2"},{"title":"Step 2: Set Up Saxo Bank Integration​","type":1,"pageTitle":"🍻 How-To Guide","url":"/wata-docs/docs/how-to#step-2-set-up-saxo-bank-integration","content":" Open a Saxo Bank Account: If you don't have one, sign up for a live trading account at Saxo Bank.  In order to be able to trade on Turbo warrants, you need to pass the test for these instruments on your Saxo Bank account for having the &quot;Turbo&quot; permission.Add money to your account to be able to trade. (Minimum 30€)  Create a Saxo API Application: Go to the Saxo Developer Portal, and create an developer account if you don't have one yet.Create an application in the &quot;Live&quot; section. Apps -&gt; Live Apps -&gt; Create Application https://www.developer.saxo/openapi/appmanagement#/liveoverviewLog in with your Saxo Bank credentials.Register a new application. You will typically need to provide: An Application Name (e.g., &quot;WATA Trading Bot&quot;).Redirect URL(s): You can often use http://localhost/ or a placeholder if the application handles OAuth redirection internally (like WATA does via command line).Grant Type: Select Code.Access Control: Select Allow this app to be enabled for trading. Once registered, chose Copy App Object and save it in a secure location. These are crucial for WATA's configuration.  ","version":"Next","tagName":"h2"},{"title":"Step 3: Set Up Telegram Notifications​","type":1,"pageTitle":"🍻 How-To Guide","url":"/wata-docs/docs/how-to#step-3-set-up-telegram-notifications","content":" You can follow the instructions here to create a bot and get the bot_token, and chat_id.  ","version":"Next","tagName":"h2"},{"title":"Step 4: Deploy and Configure WATA​","type":1,"pageTitle":"🍻 How-To Guide","url":"/wata-docs/docs/how-to#step-4-deploy-and-configure-wata","content":" Get the WATA Code: Clone or download the WATA repository to your computer.Follow Deployment Instructions: Refer to the Setup &amp; Deployment section in the README.md for detailed steps. This typically involves: Configuring Inventory (if using Ansible): Edit deploy/tools/ansible/inventory/inventory.ini.Building the Package: Run ./package.sh.Deploying: Run ./deploy/tools/deploy_app_to_your_server.sh. Configure WATA: Navigate to the deployment directory on your server (e.g., /app/deploy).Set up the .env file for the RabbitMQ password as described in the Configuration section of the README.Copy the example configuration: cp /app/etc/config_example.json /app/etc/config.json.Edit /app/etc/config.json with your details: Saxo app object inside app_config_objectTelegram bot_token and chat_id.Trading rules (allowed_indices, day_trading with profit targets and maximum loss limits, etc.).Review other settings as needed. Refer to the Configuration Guide for full details. Authenticate with Saxo: Start the application (watastart).Monitor the logs (watalogs) or check your Telegram bot for the Saxo authentication URL.Open the URL in your browser, log in to Saxo, and authorize the application.Copy the code parameter from the redirect URL.Run watasaxoauth &lt;PASTE_THE_CODE_HERE&gt; on your server.  ","version":"Next","tagName":"h2"},{"title":"Step 5: Configure TradingView (or other signal source)​","type":1,"pageTitle":"🍻 How-To Guide","url":"/wata-docs/docs/how-to#step-5-configure-tradingview-or-other-signal-source","content":" Set Up Webhooks in TradingView: In TradingView, create alerts based on your trading strategy (e.g., indicator crossovers, price levels).In the alert settings, enable the &quot;Webhook URL&quot; option.Enter the URL of your WATA web server: http://&lt;your_server_ip_or_domain&gt;:&lt;port&gt;/webhook?token=YOUR_SECRET_TOKEN (replace placeholders). The port can be found in the docker-compose.yml file for the web-server service (usually 80).The YOUR_SECRET_TOKEN is automatically generated by WATA the first time the web server starts.To view your current token, run: watawebtoken To generate a new token (for increased security), run: watawebtoken --new The token management command displays your token, which you should copy and use in your webhook URL. In the &quot;Message&quot; box of the alert, provide the JSON payload WATA expects: { &quot;action&quot;: &quot;long&quot;, // or &quot;short&quot;, &quot;close-position&quot; &quot;indice&quot;: &quot;us100&quot;, // Matches an allowed indice in your config &quot;signal_timestamp&quot;: &quot;{{timenow}}&quot;, // TradingView variable for current time &quot;alert_timestamp&quot;: &quot;{{timenow}}&quot; } Ensure indice matches one configured in allowed_indices in your config.json.Use &quot;{{timenow}}&quot; for TradingView to insert the alert trigger time dynamically.  ","version":"Next","tagName":"h2"},{"title":"Step 6: Start Trading​","type":1,"pageTitle":"🍻 How-To Guide","url":"/wata-docs/docs/how-to#step-6-start-trading","content":" Start the Application: Ensure all services are running: watastart watastatus # Check status watasaxoauth &lt;CODE&gt; # Authenticate with Saxo Bank Monitor: Keep an eye on your Telegram channel for notifications about received signals, trade executions, errors, and daily summaries.Check logs if needed: watalogs. Reporting: Use the Reporting tools from the main README to analyze performance over time.  You have now successfully set up WATA! It will listen for incoming webhook signals and attempt to execute trades on your Saxo Bank account according to your configuration and rules. Remember to monitor the system closely, especially initially. ","version":"Next","tagName":"h2"},{"title":"📈 Reporting","type":0,"sectionRef":"#","url":"/wata-docs/docs/reporting","content":"","keywords":"","version":"Next"},{"title":"Dashboard Overview​","type":1,"pageTitle":"📈 Reporting","url":"/wata-docs/docs/reporting#dashboard-overview","content":" The reporting dashboard is built on Observable Framework and provides:  Daily and cumulative profit trackingPerformance analysis by action type (long, short)Win-rate and position duration metricsInteractive data exploration    ","version":"Next","tagName":"h2"},{"title":"Setting Up the Dashboard​","type":1,"pageTitle":"📈 Reporting","url":"/wata-docs/docs/reporting#setting-up-the-dashboard","content":" ","version":"Next","tagName":"h2"},{"title":"Requirements​","type":1,"pageTitle":"📈 Reporting","url":"/wata-docs/docs/reporting#requirements","content":" To use the reporting system, you need:  Node.js and npm installedDuckDB CLI installedPython 3.12+ (with required libraries in ./reporting/requirements.txt)Ansible configured with proper inventory (same as deployment stage)  ","version":"Next","tagName":"h3"},{"title":"Dashboard Setup Steps​","type":1,"pageTitle":"📈 Reporting","url":"/wata-docs/docs/reporting#dashboard-setup-steps","content":" Run the Setup Script ./reporting/setup_dashboard.sh This script creates a new Observable Framework project in reporting/trading-dashboard. Sync Trading Data ./reporting/sync_reporting_data.sh This script synchronizes your trading data from the server to your local dashboard: Fetches DuckDB data from your production serverExports the database to Parquet formatGenerates the necessary JSON files for visualizationCopies all data to the Observable Framework project Start the Dashboard Server ./reporting/start_report_server.sh This launches the development server on port 4321. Access the dashboard at: http://localhost:4321  ","version":"Next","tagName":"h3"},{"title":"Available Reports​","type":1,"pageTitle":"📈 Reporting","url":"/wata-docs/docs/reporting#available-reports","content":" The dashboard provides several views to analyze your trading performance:  ","version":"Next","tagName":"h2"},{"title":"1. Performance Overview​","type":1,"pageTitle":"📈 Reporting","url":"/wata-docs/docs/reporting#1-performance-overview","content":" Daily profit/loss chartCumulative performance trackingMonthly and weekly summaries  ","version":"Next","tagName":"h3"},{"title":"2. Trade Analysis​","type":1,"pageTitle":"📈 Reporting","url":"/wata-docs/docs/reporting#2-trade-analysis","content":" Performance by trade typeAverage trade durationWin/loss ratioProfit factor  ","version":"Next","tagName":"h3"},{"title":"3. Risk Metrics​","type":1,"pageTitle":"📈 Reporting","url":"/wata-docs/docs/reporting#3-risk-metrics","content":" Maximum drawdownRisk/reward ratioVolatility measures  ","version":"Next","tagName":"h3"},{"title":"4. Time Analysis​","type":1,"pageTitle":"📈 Reporting","url":"/wata-docs/docs/reporting#4-time-analysis","content":" Performance by time of dayDay of week analysisTrading frequency metrics  ","version":"Next","tagName":"h3"},{"title":"Customizing the Dashboard​","type":1,"pageTitle":"📈 Reporting","url":"/wata-docs/docs/reporting#customizing-the-dashboard","content":" The Observable Framework makes it easy to customize the dashboard:  Edit files in reporting/trading-dashboard/src/pages/ to modify existing viewsAdd new pages for custom analysesAdjust visualization parameters in the configuration files ","version":"Next","tagName":"h2"},{"title":"❓ Frequently Asked Questions","type":0,"sectionRef":"#","url":"/wata-docs/docs/faq","content":"","keywords":"","version":"Next"},{"title":"General​","type":1,"pageTitle":"❓ Frequently Asked Questions","url":"/wata-docs/docs/faq#general","content":" Q: What is WATA? A: WATA (Warrants Automated Trading Assistant) is an automated Python-based trading system designed to execute trades for Knock-out warrants (Turbos) on Saxo Bank based on webhook signals (e.g., from TradingView).    Q: Who is WATA intended for? A: WATA is suited for traders who want to automate their strategies for Saxo Bank Knock-out warrants, need reliable signal execution, require trade tracking and analysis, and prefer systematic, rule-based trading.    Q: Is WATA production-ready or safe? A: No. WATA is explicitly stated as a personal learning project and not production-ready. It comes with significant risks, including the potential loss of all invested capital due to factors like insufficient testing, limited security, lack of fail-safes, and no comprehensive monitoring. Use it at your own risk.    Q: What are the main features of WATA? A: Automated trade execution via webhooks, risk management (stop-loss/take-profit handling based on configuration), performance tracking with analytics (using DuckDB), real-time Telegram notifications, and a microservice architecture.    Q: What is the architecture of WATA? A: WATA uses a microservice architecture consisting of a Web Server (receives signals), Trader (executes Saxo operations), Scheduler (orchestrates jobs), Telegram (sends notifications), and RabbitMQ (handles messaging between components).  ","version":"Next","tagName":"h2"},{"title":"General Trading​","type":1,"pageTitle":"❓ Frequently Asked Questions","url":"/wata-docs/docs/faq#general-trading","content":" Q: What type of trading can I do with WATA? A: WATA is primarily designed for short-term or daily trading strategies, aiming for consistent small gains, such as targeting 1% profit per trading day. However, the specific strategy depends on the signals you feed into it.    Q: Can WATA manage multiple different positions simultaneously (e.g., long US100 and short FRA40)? A: WATA current design focuses on processing one trade signal and managing the resulting position at a time for a specific underlying index. While it can technically handle receiving a new signal while a position is open (e.g., a 'close' signal), it is not designed for complex portfolio management involving multiple, independent, concurrent positions across different indices. Its core logic processes signals sequentially for the designated asset.    Q: How does the application interact with my Saxo bank account/capital? A: WATA operates on a single-asset strategy per trade signal. When a signal is received for an allowed index (e.g., US100), it uses a configurable percentage of your available Saxo account balance to purchase Turbo warrants. You can control this percentage using the max_account_funds_to_use_percentage parameter in the trade.config.buying_power section of your configuration (default: 100%). WATA does not support portfolio diversification or allocating specific percentages of capital to different assets simultaneously (e.g., you cannot have it manage 40% in CAC40 and 60% in NASDAQ concurrently). Each trade action focuses on one underlying asset at a time.    Q: What is the maximum leverage WATA can use? A: The maximum leverage is determined by the Saxo Bank platform and the specific Turbo warrants available. WATA does not impose additional leverage limits beyond what Saxo Bank allows for the selected instruments.    Q: What specific financial instruments does WATA trade? A: WATA is specifically designed to trade Knock-out warrants, also known as Turbos, available on the Saxo Bank platform. It identifies these instruments based on the underlying index specified in the trading signal (e.g., US100, FRA40) and your configuration.    Q: Where do the trading signals come from? Does WATA generate its own signals? A: No, WATA does not generate its own trading signals. It acts as an execution engine that relies on external signals sent via webhooks. You need to configure a separate service (like TradingView alerts or a custom script) to generate these signals based on your strategy and send them to WATA's webhook endpoint.    Q: Does WATA include risk management features? A: WATA has basic risk management capabilities configurable in config.json, such as automatic stop-loss and take-profit handling for positions based on predefined rules, and daily profit target limits. However, it's crucial to remember WATA is not production-ready and lacks sophisticated fail-safes. You are ultimately responsible for defining appropriate rules and monitoring its operation closely. Significant financial loss is possible.  ","version":"Next","tagName":"h2"},{"title":"Setup & Costs​","type":1,"pageTitle":"❓ Frequently Asked Questions","url":"/wata-docs/docs/faq#setup--costs","content":" Q: What do I need to run WATA? A: You need an Ubuntu Server VPS (minimum 2GB RAM, 50GB SSD, 2 core CPU recommended), Docker and Docker Compose, Python 3.12+, Ansible (optional, for automated deployment), a live Saxo Bank account enabled for Turbo trading, and a Telegram account. A TradingView account (paid plan) is recommended for signal generation.    Q: What are the estimated costs of running WATA? A: Costs include VPS hosting (€60 - €312+ annually), potentially a TradingView subscription for webhooks (€130 - €260+ annually), and Saxo Bank trading costs (commissions if applicable, spreads, financing costs). The WATA software itself is free.    Q: How do I install and deploy WATA? A: Deployment involves cloning the repository, configuring an Ansible inventory file with your server details, running the ./package.sh script, and then executing ./deploy/tools/deploy_app_to_your_server.sh. Detailed steps are in the How-To Guide.    Q: How do I start, stop, or check the status of WATA? A: Use the aliases set up on your server: watastart (start), watastop (stop), watastatus (check status), watalogs (view logs).  ","version":"Next","tagName":"h2"},{"title":"Configuration​","type":1,"pageTitle":"❓ Frequently Asked Questions","url":"/wata-docs/docs/faq#configuration","content":" Q: How do I configure WATA? A: After deployment, navigate to the /app/deploy directory on your server. Set the RabbitMQ password in the .env file (copied from .env.example). Then, copy /app/etc/config_example.json to /app/etc/config.json and edit it with your Saxo API details, Telegram bot info, trading rules, etc. Refer to the Configuration Guide for details.    Q: What information do I need from Saxo Bank for configuration? A: You need your Saxo account username and password, and the Application details (AppName, AppKey, AppSecret) obtained by registering an application in the Saxo Developer Portal (Live Apps section). This is configured in the authentication.saxo section of config.json.    Q: Can I limit how much of my account balance WATA uses for trading? A: Yes. Configure the max_account_funds_to_use_percentage parameter in the trade.config.buying_power section of your config.json. This parameter (value 1-100) controls what percentage of your available account balance can be used for a single position. For example, setting it to 50 means WATA will only use up to 50% of your available funds for any trade, providing a safety margin and limiting exposure.    Q: How do I set up Telegram notifications? A: Create a Telegram bot and get its bot_token and your chat_id. Add these details to the telegram section in config.json. Instructions for creating a bot can be found via links in the How-To Guide.    Q: How do I define which instruments WATA can trade? A: Use the allowed_indices rule within the trade.rules section of config.json. Map a friendly name (used in webhooks) to the Saxo Bank UnderlyingUics ID for the desired index.    Q: Can I configure trading hours or holidays? A: Yes. Use the market_hours rule to set trading_start_hour and trading_end_hour. Use the market_closed_dates rule to list dates (MM/DD/YYYY) when trading should not occur. Both are configured in the trade.rules section.    Q: How do I configure daily profit targets or limits? A: Use the day_trading rule in trade.rules. Configure percent_profit_wanted_per_days for the target and dont_enter_trade_if_day_profit_is_more_than to prevent new trades if a profit threshold is met. Set max_day_loss_percent to define the maximum loss percentage allowed for a trading day (e.g., -25%). You can also set close_position_time to automatically close positions at a specific time.  ","version":"Next","tagName":"h2"},{"title":"Saxo Bank Authentication​","type":1,"pageTitle":"❓ Frequently Asked Questions","url":"/wata-docs/docs/faq#saxo-bank-authentication","content":" Q: How does Saxo Bank authentication work? A: WATA uses OAuth 2.0. When authentication is needed (e.g., on first start or token expiry), the application will send an authorization URL via Telegram (or logs). You must open this URL, log in to Saxo, and authorize the application.    Q: What do I do with the code parameter in the URL after authorizing Saxo? A: After successful authorization in your browser, you'll be redirected to a URL containing a code=... parameter. Copy the value of this code. Then, on your server, run the command watasaxoauth &lt;COPIED_CODE&gt;.    Q: Did I need to re-authorize the app after each day/restart? A: No, the app automatically handles token refresh. Token expires every 24 hours, so if the app is stopped for more than 24 hours, you'll need to re-authorize it again.    Q: What happens if the Saxo authentication code expires? A: The code is short-lived (a few minutes). If it expires before you use watasaxoauth, you'll likely get a &quot;Failed to obtain new tokens&quot; error. You need to restart the process to get a new authorization URL and code.    Q: What does the &quot;Timeout waiting for authorization code&quot; error mean? A: It means the application waited (typically 5 minutes) for the code to be submitted via watasaxoauth but didn't receive it. You'll need to restart the authentication process.  ","version":"Next","tagName":"h2"},{"title":"Trading & Webhooks​","type":1,"pageTitle":"❓ Frequently Asked Questions","url":"/wata-docs/docs/faq#trading--webhooks","content":" Q: How do I send trading signals to WATA? A: Send a POST request to /webhook?token=YOUR_SECRET_TOKEN on your WATA server's IP/domain. The payload should be a JSON object containing action (&quot;long&quot;, &quot;short&quot;, or &quot;close-position&quot;), indice (matching an allowed index name from your config), signal_timestamp, and alert_timestamp.    Q: Where do I find the YOUR_SECRET_TOKEN for the webhook URL? A: The token is automatically generated by WATA the first time the web server starts. You can view your current token or generate a new one using the watawebtoken command.    Q: How do I manage my webhook token? A: WATA provides a command-line tool for token management. To view your current token, run watawebtoken. To generate a new token (for security updates), run watawebtoken --new. The tokens are securely encrypted before storage.    Q: Is the webhook endpoint secure? A: WATA implements several security features for webhook endpoints: token-based authentication with strong encryption, restricted file permissions for token storage, and IP address filtering as an additional layer of security. See Webhook Token Management for more details.    Q: Do I need TradingView? What plan is required? A: TradingView is recommended but not strictly required if you have another signal source capable of sending webhooks in the correct format. If using TradingView for webhooks, you need a paid plan (Essentials, Plus, or Premium) as free plans don't support webhooks reliably for automation.    Q: How do I configure a TradingView alert for WATA? A: In the TradingView alert settings, enable the &quot;Webhook URL&quot; option and paste your WATA webhook URL (including the secret token). In the &quot;Message&quot; box, paste the required JSON payload format, using &quot;{{timenow}}&quot; for the timestamps and ensuring the indice matches one in your config.json.  ","version":"Next","tagName":"h2"},{"title":"Reporting & Monitoring​","type":1,"pageTitle":"❓ Frequently Asked Questions","url":"/wata-docs/docs/faq#reporting--monitoring","content":" Q: How can I track WATA's trading performance? A: WATA stores trade data in a DuckDB database. An Observable Framework-based reporting dashboard can be set up locally to visualize performance (daily/cumulative P&amp;L, win rate, etc.).    Q: How do I monitor the application's activity? A: Check the Telegram notifications for real-time updates on signals, trades, and errors. Use the watalogs command on the server to view detailed logs. Use watastatus to check the status of the Docker containers. ","version":"Next","tagName":"h2"},{"title":"🔐 Saxo Bank Authentication","type":0,"sectionRef":"#","url":"/wata-docs/docs/saxo-authentication","content":"","keywords":"","version":"Next"},{"title":"Authentication Process​","type":1,"pageTitle":"🔐 Saxo Bank Authentication","url":"/wata-docs/docs/saxo-authentication#authentication-process","content":" When the application needs to authenticate with Saxo Bank, it will send you a URL via Telegram (or logs of container), that you need to open in your browser.    Open the provided URL in your web browser. Log in with your Saxo Bank credentials and authorize the application. After authorization, you'll be redirected to a page with a URL containing a code parameter. For example: http://localhost/callback?code=abc123def456ghi789&amp;state=abcdef1234567890 Copy the value of the code parameter (in this example, abc123def456ghi789). On the server where WATA is installed, run the following command: watasaxoauth &lt;CODE&gt; Replace &lt;CODE&gt; with the authorization code you copied. The application will now continue with the authentication process using this code to obtain an access token.  2025-03-30 21:05:36,935 - saxo_auth_cli - INFO - Authorization code saved to /app/var/lib/saxo_auth/saxo_auth_code.txt Authorization code saved successfully! The application will now continue with the authentication process.   ","version":"Next","tagName":"h2"},{"title":"Troubleshooting​","type":1,"pageTitle":"🔐 Saxo Bank Authentication","url":"/wata-docs/docs/saxo-authentication#troubleshooting","content":" If you receive an error about Failed to obtain new tokens, you provided an invalid or expired code. Repeat the process to get a fresh authorization code.The authorization code is valid only for a short time (typically a few minutes).If you see a &quot;Timeout waiting for authorization code&quot; error, it means the application waited for 5 minutes but didn't receive the authorization code.  ","version":"Next","tagName":"h2"},{"title":"Command Reference​","type":1,"pageTitle":"🔐 Saxo Bank Authentication","url":"/wata-docs/docs/saxo-authentication#command-reference","content":" watasaxoauth &lt;CODE&gt;: Submits the authorization code to the applicationwatastart: Starts the applicationwatastop: Stops the applicationwatalogs: Shows application logswatastatus: Shows application status ","version":"Next","tagName":"h2"},{"title":"🛠️ Configuration Guide","type":0,"sectionRef":"#","url":"/wata-docs/docs/configuration","content":"","keywords":"","version":"Next"},{"title":"Configuration File Structure​","type":1,"pageTitle":"🛠️ Configuration Guide","url":"/wata-docs/docs/configuration#configuration-file-structure","content":" WATA uses a JSON configuration file (config.json) located in the etc/ directory. Below is a detailed explanation of each section.  ","version":"Next","tagName":"h2"},{"title":"Authentication​","type":1,"pageTitle":"🛠️ Configuration Guide","url":"/wata-docs/docs/configuration#authentication","content":" ","version":"Next","tagName":"h2"},{"title":"Saxo Bank API Authentication​","type":1,"pageTitle":"🛠️ Configuration Guide","url":"/wata-docs/docs/configuration#saxo-bank-api-authentication","content":" &quot;authentication&quot;: { &quot;saxo&quot;: { &quot;app_config_object&quot;: { &quot;AppName&quot;: &quot;xxxx&quot;, &quot;AppKey&quot;: &quot;xxxx&quot;, &quot;AuthorizationEndpoint&quot;: &quot;https://live.logonvalidation.net/authorize&quot;, &quot;TokenEndpoint&quot;: &quot;https://live.logonvalidation.net/token&quot;, &quot;GrantType&quot;: &quot;Code&quot;, &quot;OpenApiBaseUrl&quot;: &quot;https://gateway.saxobank.com/openapi/&quot;, &quot;RedirectUrls&quot;: [ &quot;https://localhost&quot; ], &quot;AppSecret&quot;: &quot;xxxx&quot; } }, &quot;persistant&quot;: { &quot;token_path&quot;: &quot;/app/var/lib/saxo_auth/persist_token.json&quot; } }   app_config_object: OAuth 2.0 configuration for the Saxo API AppName: Your registered application nameAppKey: Your API key from Saxo Bank Developer PortalAuthorizationEndpoint: OAuth authorization URLTokenEndpoint: OAuth token URLGrantType: OAuth grant type (should be &quot;Code&quot;)OpenApiBaseUrl: Base URL for Saxo Open APIRedirectUrls: Callback URLs for OAuth flowAppSecret: Your API secret from Saxo Bank Developer Portal persistant.token_path: File path to store authentication tokens  ","version":"Next","tagName":"h3"},{"title":"Webserver​","type":1,"pageTitle":"🛠️ Configuration Guide","url":"/wata-docs/docs/configuration#webserver","content":" &quot;webserver&quot;: { &quot;persistant&quot;: { &quot;token_path&quot;: &quot;/app/var/lib/web_server/persist_token.json&quot; }, &quot;app_secret&quot;: &quot;CHANGE_THIS_TO_A_STRONG_SECRET_KEY&quot; }   persistant.token_path: Path to store webhook authentication tokens (encrypted)app_secret: Secret key used for token encryption (change this to a strong, unique value)  ","version":"Next","tagName":"h2"},{"title":"Managing Webhook Tokens​","type":1,"pageTitle":"🛠️ Configuration Guide","url":"/wata-docs/docs/configuration#managing-webhook-tokens","content":" WATA provides a command-line tool to manage your webhook tokens:  View your current token: watawebtoken Generate a new token: watawebtoken --new   The token must be included in webhook requests as a query parameter: /webhook?token=YOUR_TOKEN  ","version":"Next","tagName":"h3"},{"title":"Logging​","type":1,"pageTitle":"🛠️ Configuration Guide","url":"/wata-docs/docs/configuration#logging","content":" &quot;logging&quot;: { &quot;persistant&quot;: { &quot;log_path&quot;: &quot;/app/var/log/&quot; }, &quot;level&quot;: &quot;INFO&quot;, &quot;format&quot;: &quot;%(asctime)s - %(levelname)s - %(name)s - %(message)s&quot; }   persistant.log_path: Directory for storing log fileslevel: Logging level (DEBUG, INFO, WARNING, ERROR, CRITICAL)format: Log message format  ","version":"Next","tagName":"h2"},{"title":"RabbitMQ​","type":1,"pageTitle":"🛠️ Configuration Guide","url":"/wata-docs/docs/configuration#rabbitmq","content":" &quot;rabbitmq&quot;: { &quot;hostname&quot;: &quot;rabbitmq1&quot;, &quot;authentication&quot;: { &quot;username&quot;: &quot;trade-app&quot;, &quot;password&quot;: &quot;DONT_TOUCH_IT_IS_SET_BY_DOCKER_COMPOSE&quot; } }   hostname: RabbitMQ server hostnameauthentication: Credentials for RabbitMQ username: RabbitMQ usernamepassword: RabbitMQ password (automatically set by Docker Compose)  ","version":"Next","tagName":"h2"},{"title":"DuckDB​","type":1,"pageTitle":"🛠️ Configuration Guide","url":"/wata-docs/docs/configuration#duckdb","content":" &quot;duckdb&quot;: { &quot;persistant&quot;: { &quot;db_path&quot;: &quot;/app/var/lib/duckdb/trading_data.duckdb&quot; } }   persistant.db_path: File path for the DuckDB database  ","version":"Next","tagName":"h2"},{"title":"Trading Rules​","type":1,"pageTitle":"🛠️ Configuration Guide","url":"/wata-docs/docs/configuration#trading-rules","content":" { &quot;trade&quot;: { &quot;rules&quot;: [ { &quot;rule_name&quot;: &quot;allowed_indices&quot;, &quot;rule_type&quot;: &quot;allowed_indices&quot;, &quot;rule_config&quot;: { &quot;indice_ids&quot;: { &quot;us100&quot;: &quot;1909050&quot; } } }, { &quot;rule_name&quot;: &quot;market_closed_dates&quot;, &quot;rule_type&quot;: &quot;market_closed_dates&quot;, &quot;rule_config&quot;: { &quot;market_closed_dates&quot;: [ &quot;04/07/2024&quot;, &quot;02/09/2024&quot;, &quot;28/11/2024&quot;, &quot;25/12/2024&quot;, &quot;03/07/2024&quot;, &quot;29/11/2024&quot;, &quot;24/12/2024&quot;, &quot;01/01/2025&quot;, &quot;09/01/2025&quot;, &quot;20/01/2025&quot;, &quot;17/02/2025&quot;, &quot;18/04/2025&quot;, &quot;26/05/2025&quot;, &quot;19/06/2025&quot;, &quot;04/07/2025&quot;, &quot;01/09/2025&quot;, &quot;27/11/2025&quot;, &quot;25/12/2025&quot;, &quot;03/07/2025&quot;, &quot;28/11/2025&quot;, &quot;24/12/2025&quot;, &quot;01/01/2026&quot; ] } }, { &quot;rule_name&quot;: &quot;day_trading&quot;, &quot;rule_type&quot;: &quot;day_trading&quot;, &quot;rule_config&quot;: { &quot;percent_profit_wanted_per_days&quot;: 1.7, &quot;max_day_loss_percent&quot;: -25, &quot;dont_enter_trade_if_day_profit_is_more_than&quot;: 1.25, &quot;close_position_time&quot;: &quot;21:55&quot; } }, { &quot;rule_name&quot;: &quot;signal_validation&quot;, &quot;rule_type&quot;: &quot;signal_validation&quot;, &quot;rule_config&quot;: { &quot;max_signal_age_minutes&quot;: 5 } }, { &quot;rule_name&quot;: &quot;market_hours&quot;, &quot;rule_type&quot;: &quot;market_hours&quot;, &quot;rule_config&quot;: { &quot;trading_start_hour&quot;: 8, &quot;trading_end_hour&quot;: 22, &quot;risky_trading_start_hour&quot;: 21, &quot;risky_trading_start_minute&quot;: 54 } } ], &quot;config&quot;: { &quot;turbo_preference&quot;: { &quot;exchange_id&quot;: &quot;CATS_SAXO&quot;, &quot;price_range&quot;: { &quot;min&quot;: 4, &quot;max&quot;: 15 } }, &quot;buying_power&quot;: { &quot;max_account_funds_to_use_percentage&quot;: 100, &quot;safety_margins&quot;: { &quot;bid_calculation&quot;: 1 } }, &quot;position_management&quot;: { &quot;performance_thresholds&quot;: { &quot;stoploss_percent&quot;: -20, &quot;max_profit_percent&quot;: 60 } }, &quot;general&quot;: { &quot;api_limits&quot;: { &quot;top_instruments&quot;: 200, &quot;top_positions&quot;: 200, &quot;top_closed_positions&quot;: 500 }, &quot;retry_config&quot;: { &quot;max_retries&quot;: 10, &quot;retry_sleep_seconds&quot;: 1 }, &quot;position_check&quot;: { &quot;check_interval_seconds&quot;: 7, &quot;timeout_seconds&quot;: 20 }, &quot;websocket&quot;: { &quot;refresh_rate_ms&quot;: 10000 }, &quot;timezone&quot;: &quot;Europe/Paris&quot; }, &quot;trading_mode&quot;: &quot;day_trading&quot; }, &quot;persistant&quot;: { &quot;last_action_file&quot;: &quot;/app/var/lib/trade/last_action.json&quot; } } }   ","version":"Next","tagName":"h2"},{"title":"Trading Rules Type Explained​","type":1,"pageTitle":"🛠️ Configuration Guide","url":"/wata-docs/docs/configuration#trading-rules-type-explained","content":" allowed_indices: Defines which indices can be tradedMaps friendly names used in the webhook signal to Saxo Bank instrument IDs (As UnderlyingUics)You can use https://www.saxoinvestor.fr/investor/page/turbos to select all the available indices, and you will find their corresponding UnderlyingUics in parameters URL.Example: &quot;us100&quot; mapped to Saxo ID &quot;1909050&quot; (https://www.saxoinvestor.fr/investor/page/turbos-list?assettypes=WarrantKnockOut%2CWarrantOpenEndKnockOut%2CMiniFuture%2CWarrantDoubleKnockOut&amp;includenontradable=false&amp;instrumentlimit=100&amp;isNavigatedThroughDedicatedAutoInvest=false&amp;issuers=Vontobel%20Financial%20Products%20GM&amp;orderby=ThreeMonthsPopularity%20asc&amp;productGroup=Turbos&amp;size=100&amp;underlyingassettypes=StockIndex&amp;underlyinguics=1909050) market_closed_dates: Lists dates when markets are closed (holidays)Format: &quot;MM/DD/YYYY&quot;Trading will not occur on these dates day_trading: Sets day trading multiple conditions: percent_profit_wanted_per_days: Target daily profit percentage (1.7%)max_day_loss_percent: Maximum loss percentage allowed for a trading day (-25%)dont_enter_trade_if_day_profit_is_more_than: Don't open new positions if daily profit exceeds this threshold (1.25%)close_position_time: Time when all positions should be automatically closed (format: &quot;HH:MM&quot;, default: &quot;21:55&quot;) signal_validation: Controls validation of trading signals: max_signal_age_minutes: Maximum age of a signal in minutes before it's considered too old (default: 5)Signals older than this value will be rejected with a &quot;Signal timestamp is too old&quot; error market_hours: Defines the trading hours and restrictions: trading_start_hour: Hour when trading begins (24-hour format, default: 8)trading_end_hour: Hour when trading ends (24-hour format, default: 22)risky_trading_start_hour: Hour when risky trading period begins (24-hour format, default: 21)risky_trading_start_minute: Minute when risky trading period begins (default: 54)Trading is not allowed outside the trading hoursTrading is considered risky during the period from risky_trading_start_hour:risky_trading_start_minute to trading_end_hour:00  ","version":"Next","tagName":"h3"},{"title":"Trading Configuration​","type":1,"pageTitle":"🛠️ Configuration Guide","url":"/wata-docs/docs/configuration#trading-configuration","content":" turbo_preference.exchange_id: Exchange ID for turbo warrant instrumentsturbo_preference.price_range: Price range for filtering turbo instruments min: Minimum price for turbo instruments (default: 4)max: Maximum price for turbo instruments (default: 15) buying_power.max_account_funds_to_use_percentage: Maximum percentage of account balance that can be used for trading (1-100, default: 100) Controls how much of your available Saxo account funds can be allocated to a single positionLower values provide a safety margin and limit exposureExample: Setting to 50 means only half of your available balance will be used for trading buying_power.safety_margins: Safety margins for calculations bid_calculation: Margin subtracted when calculating bid amount (default: 1) position_management.performance_thresholds: Performance percentages to trigger closing a position stoploss_percent: Minimum performance percentage (e.g., -20)max_profit_percent: Maximum performance percentage (e.g., 60) general.api_limits: Limits for API requests top_instruments: Max instruments to fetch (default: 200)top_positions: Max open positions to fetch (default: 200)top_closed_positions: Max closed positions to fetch (default: 500) general.retry_config: Settings for retrying actions max_retries: Maximum number of retries (e.g., finding position after order) (default: 10)retry_sleep_seconds: Seconds to wait between retries (default: 1) general.position_check: Settings for periodic position performance checks check_interval_seconds: How often to check performance (default: 7)timeout_seconds: How long the check process should run before stopping (default: 20) general.websocket: WebSocket configuration refresh_rate_ms: Refresh rate for WebSocket subscriptions in milliseconds (default: 10000) general.timezone: Timezone used for date/time operations throughout the application (default: &quot;Europe/Paris&quot;) Uses standard timezone identifiers from the IANA Time Zone DatabaseExamples: &quot;America/New_York&quot;, &quot;Europe/London&quot;, &quot;Asia/Tokyo&quot;, &quot;Australia/Sydney&quot; persistant.last_action_file: File path to store the last trading action  ","version":"Next","tagName":"h3"},{"title":"Telegram Notifications​","type":1,"pageTitle":"🛠️ Configuration Guide","url":"/wata-docs/docs/configuration#telegram-notifications","content":" &quot;telegram&quot;: { &quot;bot_token&quot;: &quot;xxxx&quot;, &quot;chat_id&quot;: &quot;xxxx&quot;, &quot;bot_name&quot;: &quot;xxxx&quot; }   bot_token: Telegram Bot API tokenchat_id: Telegram chat ID to send notifications tobot_name: Name of your Telegram bot  ","version":"Next","tagName":"h2"},{"title":"Setting Up Your Configuration​","type":1,"pageTitle":"🛠️ Configuration Guide","url":"/wata-docs/docs/configuration#setting-up-your-configuration","content":" Copy the example configuration file: cp /app/etc/config_example.json /app/etc/config.json Edit the configuration file: nano /app/etc/config.json Update with your specific settings: Saxo Bank credentials and API detailsTelegram bot informationTrading rules as needed The RabbitMQ password is automatically set by Docker Compose from the .env file in the deploy directory. Restart the application to apply changes: watastop watastart   ","version":"Next","tagName":"h2"},{"title":"Important Notes​","type":1,"pageTitle":"🛠️ Configuration Guide","url":"/wata-docs/docs/configuration#important-notes","content":" Store your configuration file securely, as it contains sensitive informationBackup your configuration before making significant changesSome paths are pre-configured for the Docker deployment and should not be changed without updating the Docker Compose configurationThe RabbitMQ password is managed automatically and should not be edited directly in the config file ","version":"Next","tagName":"h2"},{"title":"📊 Trading Workflow","type":0,"sectionRef":"#","url":"/wata-docs/docs/trading-workflow","content":"","keywords":"","version":"Next"},{"title":"Signal to Execution Flow​","type":1,"pageTitle":"📊 Trading Workflow","url":"/wata-docs/docs/trading-workflow#signal-to-execution-flow","content":" Signal Reception Validate incoming webhooks (authentication, token verification)Parse action type (long, short, close)Extract and validate required fields (indice, timestamps) Rule Validation Verify market hours (trading only during configured hours)Check timestamp freshness (reject stale signals)Validate allowed indices (only trade configured indices)Apply daily profit limits (stop trading if daily goal reached) Trade Execution For new positions: Search for optimal instrument based on configured parametersCalculate order size based on account balance and risk settingsPlace order and confirm position creation For closing positions: Retrieve current position detailsCreate closing orderCalculate and report performance metrics Position monitoring: Continuous position performance trackingAutomatic stop-loss/take-profit handling Performance Tracking Daily statistics generationPerformance metrics reportingDatabase storage for analysis  ","version":"Next","tagName":"h2"},{"title":"Example Notification Flow​","type":1,"pageTitle":"📊 Trading Workflow","url":"/wata-docs/docs/trading-workflow#example-notification-flow","content":" WATA sends detailed notifications via Telegram at each step of the trading process:    ","version":"Next","tagName":"h2"},{"title":"Webhook Configuration​","type":1,"pageTitle":"📊 Trading Workflow","url":"/wata-docs/docs/trading-workflow#webhook-configuration","content":" To interact with WATA, send trading signals to:  POST /webhook?token=YOUR_SECRET_TOKEN   With a payload like:  { &quot;action&quot;: &quot;long&quot;, &quot;indice&quot;: &quot;us100&quot;, &quot;signal_timestamp&quot;: &quot;2023-07-01T12:00:00Z&quot;, &quot;alert_timestamp&quot;: &quot;2023-07-01T12:00:01Z&quot; }   Available actions:  long: Open a long positionshort: Open a short positionclose-position: Close the current position  The indice must match one of the allowed indices configured in your config.json file. ","version":"Next","tagName":"h2"},{"title":"🔑 Webhook Token Management","type":0,"sectionRef":"#","url":"/wata-docs/docs/web-server-token","content":"","keywords":"","version":"Next"},{"title":"Command Reference:​","type":1,"pageTitle":"🔑 Webhook Token Management","url":"/wata-docs/docs/web-server-token#command-reference","content":" View your current token: watawebtoken Generate a new token: watawebtoken --new   This will generate a new token and update the persistent storage.  ","version":"Next","tagName":"h2"},{"title":"Security Features:​","type":1,"pageTitle":"🔑 Webhook Token Management","url":"/wata-docs/docs/web-server-token#security-features","content":" All tokens are encrypted before storageFile permissions are restricted to the owner onlyIP address filtering adds an additional layer of security ","version":"Next","tagName":"h2"},{"title":"📝 Documentation Website","type":0,"sectionRef":"#","url":"/wata-docs/docs/website","content":"","keywords":"","version":"Next"},{"title":"Overview​","type":1,"pageTitle":"📝 Documentation Website","url":"/wata-docs/docs/website#overview","content":" The WATA documentation website is built with Docusaurus, a modern static website generator optimized for documentation sites. It's hosted on GitHub Pages and can be accessed at https://ioiti.github.io/wata/.  ","version":"Next","tagName":"h2"},{"title":"Local Development​","type":1,"pageTitle":"📝 Documentation Website","url":"/wata-docs/docs/website#local-development","content":" To run the documentation website locally:  Clone the WATA repository git clone https://github.com/IOITI/wata.git cd wata Navigate to the website directory cd wata-docs Install dependencies npm install Start the development server npm start Open your browser to http://localhost:3000/wata/  The development server features hot reloading, allowing you to see changes immediately as you edit files.  ","version":"Next","tagName":"h2"},{"title":"Documentation Structure​","type":1,"pageTitle":"📝 Documentation Website","url":"/wata-docs/docs/website#documentation-structure","content":" The documentation is organized into the following sections:  Introduction: Overview of WATAArchitecture: System design and componentsTrading Workflow: How trades are processedHow-To Guide: Step-by-step setup instructionsConfiguration Guide: Detailed configuration optionsDeployment Guide: How to deploy WATASaxo Authentication: Authenticating with Saxo BankDatabase System: Data storage and managementReporting: Analytics and visualization capabilitiesContributing: How to contribute to WATAFAQ: Frequently asked questions  ","version":"Next","tagName":"h2"},{"title":"Adding Content​","type":1,"pageTitle":"📝 Documentation Website","url":"/wata-docs/docs/website#adding-content","content":" To add new documentation:  Create a new Markdown file in the docs/ directory with the appropriate sidebar position --- sidebar_position: X --- # Title of Document Content goes here... Add the document to the appropriate category in sidebars.js Use Markdown for content, with support for: Code blocks with syntax highlightingAdmonitions (notes, warnings, etc.)Mermaid diagramsImages and other media  ","version":"Next","tagName":"h2"},{"title":"Deployment​","type":1,"pageTitle":"📝 Documentation Website","url":"/wata-docs/docs/website#deployment","content":" The documentation website is automatically deployed to GitHub Pages whenever changes are pushed to the main branch. You can also manually deploy by running:  cd wata-docs npm run gh-pages   This will build the site and push the changes to the gh-pages branch, which is configured to serve as the GitHub Pages source. ","version":"Next","tagName":"h2"}],"options":{"id":"default"}}